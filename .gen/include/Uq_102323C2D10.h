/**                                      -*- mode:C++ -*- */

/***********************         DO NOT EDIT        ******************************
*
* C2D.h - Quark header for ULAM
*
**********************************************************************************
* This code is generated by the ULAM programming language compilation system.
*
* The ULAM programming language compilation system is free software:
* you can redistribute it and/or modify it under the terms of the GNU
* General Public License as published by the Free Software
* Foundation, either version 3 of the License, or (at your option)
* any later version.
*
* The ULAM programming language compilation system is distributed in
* the hope that it will be useful, but WITHOUT ANY WARRANTY; without
* even the implied warranty of MERCHANTABILITY or FITNESS FOR A
* PARTICULAR PURPOSE.  See the GNU General Public License for more
* details.
*
* You should have received a copy of the GNU General Public License
* along with the ULAM programming language compilation system
* software.  If not, see <http://www.gnu.org/licenses/>.
*
* @license GPL-3.0+ <http://spdx.org/licenses/GPL-3.0+>
*/

#ifndef UQ_102323C2D10_H
#define UQ_102323C2D10_H

#include "UlamDefs.h"

#include "Uq_102323C2D10_Types.h"

namespace MFM { template <class EC> struct Ue_10133Box10; }  //FORWARD
namespace MFM { template <class EC, u32 POS> struct Uq_10109210DebugUtils10; }  //FORWARD
namespace MFM { template <class EC, u32 POS> struct Uq_10109211EventWindow10; }  //FORWARD
namespace MFM { template <class EC, u32 POS> struct Uq_1010919AtomUtils10; }  //FORWARD
namespace MFM { template <class EC> struct Ue_10105Empty10; }  //FORWARD

namespace MFM{

  template <class EC, u32 POS>
  struct Uq_102323C2D10 : public UlamClass
  {

    // Extract short names for parameter types
    typedef typename EC::ATOM_CONFIG AC;
    typedef typename AC::ATOM_TYPE T;
    enum { BPA = AC::BITS_PER_ATOM };
    typedef BitVector<BPA> BV;

    enum { 
      QUARK_SIZE = 32 /* Requiring quarks to advertise their size in a std way.) */
    };

    typedef AtomicParameterType <EC, VD::BITS, QUARK_SIZE, POS> Up_Us; //entire quark


    //! C2D.ulam:4:   typedef Unsigned(3) Dir;

    //! C2D.ulam:5:   typedef Int(16) Coord;

    //! C2D.ulam:7:   EventWindow ew;
    typedef Uq_10109211EventWindow10<EC, POS + 0> Ut_Um_2ew;

    //! C2D.ulam:9:   Coord x;
    typedef AtomicParameterType<EC, VD::S32, 16, POS + 0> Up_Um_1x;

    //! C2D.ulam:10:   Coord y;
    typedef AtomicParameterType<EC, VD::S32, 16, POS + 16> Up_Um_1y;


    //! C2D.ulam:12:   Void init(Int ax, Int ay) {
    static void Uf_4init(UlamContext<EC>& uc, T& Uv_4self, Ui_Ut_102321i Uv_2ax, Ui_Ut_102321i Uv_2ay);


    //! C2D.ulam:17:   Int getX() { return (Int) x; }
    static Ui_Ut_102321i Uf_4getX(UlamContext<EC>& uc, T& Uv_4self);


    //! C2D.ulam:18:   Int getY() { return (Int) y; }
    static Ui_Ut_102321i Uf_4getY(UlamContext<EC>& uc, T& Uv_4self);


    //! C2D.ulam:20:   Void setX(Int ax) { x = (Coord) ax; }
    static void Uf_4setX(UlamContext<EC>& uc, T& Uv_4self, Ui_Ut_102321i Uv_2ax);


    //! C2D.ulam:21:   Void setY(Int ay) { y = (Coord) ay; }
    static void Uf_4setY(UlamContext<EC>& uc, T& Uv_4self, Ui_Ut_102321i Uv_2ay);


    //! C2D.ulam:23:   C2D make(Int x, Int y) {
    static Ui_Uq_102323C2D10<EC> Uf_4make(UlamContext<EC>& uc, T& Uv_4self, Ui_Ut_102321i Uv_1x, Ui_Ut_102321i Uv_1y);


    //! C2D.ulam:29:   Bool equals(C2D other) {
    static Ui_Ut_10111b Uf_6equals(UlamContext<EC>& uc, T& Uv_4self, Ui_Uq_102323C2D10<EC> Uv_5other);


    //! C2D.ulam:33:   C2D add(C2D other) {
    static Ui_Uq_102323C2D10<EC> Uf_3add(UlamContext<EC>& uc, T& Uv_4self, Ui_Uq_102323C2D10<EC> Uv_5other);


    //! C2D.ulam:37:   C2D subtract(C2D other) {
    static Ui_Uq_102323C2D10<EC> Uf_8subtract(UlamContext<EC>& uc, T& Uv_4self, Ui_Uq_102323C2D10<EC> Uv_5other);


    //! C2D.ulam:41:   Int dot(C2D other) {
    static Ui_Ut_102321i Uf_3dot(UlamContext<EC>& uc, T& Uv_4self, Ui_Uq_102323C2D10<EC> Uv_5other);


    //! C2D.ulam:45:   Int toInt() {
    static Ui_Ut_102321i Uf_5toInt(UlamContext<EC>& uc, T& Uv_4self);


    //! C2D.ulam:53:   C2D neighbor(Dir d) {
    static Ui_Uq_102323C2D10<EC> Uf_8neighbor(UlamContext<EC>& uc, T& Uv_4self, Ui_Ut_10131u Uv_1d);


    //! C2D.ulam:67:   C2D corner(Dir d) {
    static Ui_Uq_102323C2D10<EC> Uf_6corner(UlamContext<EC>& uc, T& Uv_4self, Ui_Ut_10131u Uv_1d);


    //! C2D.ulam:78:   Unsigned length() {
    static Ui_Ut_102321u Uf_6length(UlamContext<EC>& uc, T& Uv_4self);


    //! C2D.ulam:83:   Unsigned manhattanDistance(C2D other) {
    static Ui_Ut_102321u Uf_9217manhattanDistance(UlamContext<EC>& uc, T& Uv_4self, Ui_Uq_102323C2D10<EC> Uv_5other);

    //helper method not called directly
    s32 PositionOfDataMemberType(const char * namearg) const;

    const UlamClassDataMemberInfo & GetDataMemberInfo(u32 dataMemberNumber) const;

    s32 GetDataMemberCount() const;

    const char * GetMangledClassName() const;

  };
} //MFM

#include "Uq_102323C2D10.tcc"

#endif //UQ_102323C2D10_H
