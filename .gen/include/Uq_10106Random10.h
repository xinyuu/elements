/**                                      -*- mode:C++ -*- */

/***********************         DO NOT EDIT        ******************************
*
* Random.h - Quark header for ULAM
*
**********************************************************************************
* This code is generated by the ULAM programming language compilation system.
*
* The ULAM programming language compilation system is free software:
* you can redistribute it and/or modify it under the terms of the GNU
* General Public License as published by the Free Software
* Foundation, either version 3 of the License, or (at your option)
* any later version.
*
* The ULAM programming language compilation system is distributed in
* the hope that it will be useful, but WITHOUT ANY WARRANTY; without
* even the implied warranty of MERCHANTABILITY or FITNESS FOR A
* PARTICULAR PURPOSE.  See the GNU General Public License for more
* details.
*
* You should have received a copy of the GNU General Public License
* along with the ULAM programming language compilation system
* software.  If not, see <http://www.gnu.org/licenses/>.
*
* @license GPL-3.0+ <http://spdx.org/licenses/GPL-3.0+>
*/

#ifndef UQ_10106RANDOM10_H
#define UQ_10106RANDOM10_H

#include "UlamDefs.h"

#include "Uq_10106Random10_Types.h"

namespace MFM { template <class EC> struct Ue_102213Box10; }  //FORWARD
namespace MFM { template <class EC, u32 POS> struct Uq_10109210DebugUtils10; }  //FORWARD
namespace MFM { template <class EC, u32 POS> struct Uq_10109211EventWindow10; }  //FORWARD
namespace MFM { template <class EC, u32 POS> struct Uq_1010919AtomUtils10; }  //FORWARD
namespace MFM { template <class EC> struct Ue_102689214WindowServices10; }  //FORWARD
namespace MFM { template <class EC> struct Ue_102294Pbox10; }  //FORWARD
namespace MFM { template <class EC> struct Ue_10105Empty10; }  //FORWARD
namespace MFM { template <class EC> struct Ue_10104Wall10; }  //FORWARD
namespace MFM { template <class EC> struct Ue_10106Marker10; }  //FORWARD
namespace MFM { template <class EC, u32 POS> struct Uq_102323C2D10; }  //FORWARD
namespace MFM { template <class EC, u32 POS> struct Uq_10105MDist10; }  //FORWARD
namespace MFM { template <class EC, u32 POS> struct Uq_10104Fail10; }  //FORWARD

namespace MFM{

  template <class EC, u32 POS>
  struct Uq_10106Random10 : public UlamClass
  {

    // Extract short names for parameter types
    typedef typename EC::ATOM_CONFIG AC;
    typedef typename AC::ATOM_TYPE T;
    enum { BPA = AC::BITS_PER_ATOM };
    typedef BitVector<BPA> BV;

    enum { 
      QUARK_SIZE = 0 /* Requiring quarks to advertise their size in a std way.) */
    };

    typedef AtomicParameterType <EC, VD::BITS, QUARK_SIZE, POS> Up_Us; //entire quark


    //! Random.ulam:26:   Int between(Int lo, Int hi) {
    static Ui_Ut_102321i Uf_7between(UlamContext<EC>& uc, T& Uv_4self, Ui_Ut_102321i Uv_2lo, Ui_Ut_102321i Uv_2hi);


    //! Random.ulam:44:   Bool oneIn(Int odds) { return oneIn((Unsigned) odds); }
    static Ui_Ut_10111b Uf_5oneIn(UlamContext<EC>& uc, T& Uv_4self, Ui_Ut_102321i Uv_4odds);


    //! Random.ulam:42:   Bool oneIn(Unsigned odds) { return oddsOf((Unsigned) 1, odds); }
    static Ui_Ut_10111b Uf_5oneIn(UlamContext<EC>& uc, T& Uv_4self, Ui_Ut_102321u Uv_4odds);


    //! Random.ulam:15:   Unsigned bits(Int max) {
    static Ui_Ut_102321u Uf_4bits(UlamContext<EC>& uc, T& Uv_4self, Ui_Ut_102321i Uv_3max);


    //! Random.ulam:14:   Unsigned bits(Unsigned bitCount) native;
    static Ui_Ut_102321u Uf_4bits(UlamContext<EC>& uc, T& Uv_4self, Ui_Ut_102321u Uv_8bitCount); //native


    //! Random.ulam:21:   Unsigned create(Int max) {
    static Ui_Ut_102321u Uf_6create(UlamContext<EC>& uc, T& Uv_4self, Ui_Ut_102321i Uv_3max);


    //! Random.ulam:20:   Unsigned create(Unsigned max) native;
    static Ui_Ut_102321u Uf_6create(UlamContext<EC>& uc, T& Uv_4self, Ui_Ut_102321u Uv_3max); //native


    //! Random.ulam:38:   Bool oddsOf(Int thisMany, Int outOfThisMany) {
    static Ui_Ut_10111b Uf_6oddsOf(UlamContext<EC>& uc, T& Uv_4self, Ui_Ut_102321i Uv_8thisMany, Ui_Ut_102321i Uv_9213outOfThisMany);


    //! Random.ulam:35:   Bool oddsOf(Unsigned thisMany, Unsigned outOfThisMany) {
    static Ui_Ut_10111b Uf_6oddsOf(UlamContext<EC>& uc, T& Uv_4self, Ui_Ut_102321u Uv_8thisMany, Ui_Ut_102321u Uv_9213outOfThisMany);

    //helper method not called directly
    s32 PositionOfDataMemberType(const char * namearg) const;

    const UlamClassDataMemberInfo & GetDataMemberInfo(u32 dataMemberNumber) const;

    s32 GetDataMemberCount() const;

    const char * GetMangledClassName() const;

  };
} //MFM

#include "Uq_10106Random10.tcc"

#include "Uq_10106Random10_native.tcc"

#endif //UQ_10106RANDOM10_H
