/**                                      -*- mode:C++ -*- */

/***********************         DO NOT EDIT        ******************************
*
* WindowServices.h - Element header for ULAM
*
**********************************************************************************
* This code is generated by the ULAM programming language compilation system.
*
* The ULAM programming language compilation system is free software:
* you can redistribute it and/or modify it under the terms of the GNU
* General Public License as published by the Free Software
* Foundation, either version 3 of the License, or (at your option)
* any later version.
*
* The ULAM programming language compilation system is distributed in
* the hope that it will be useful, but WITHOUT ANY WARRANTY; without
* even the implied warranty of MERCHANTABILITY or FITNESS FOR A
* PARTICULAR PURPOSE.  See the GNU General Public License for more
* details.
*
* You should have received a copy of the GNU General Public License
* along with the ULAM programming language compilation system
* software.  If not, see <http://www.gnu.org/licenses/>.
*
* @license GPL-3.0+ <http://spdx.org/licenses/GPL-3.0+>
*/

#ifndef UE_102689214WINDOWSERVICES10_H
#define UE_102689214WINDOWSERVICES10_H

#include "UlamDefs.h"

#include "Ue_102689214WindowServices10_Types.h"

namespace MFM { template <class EC> struct Ue_102213Box10; }  //FORWARD
namespace MFM { template <class EC, u32 POS> struct Uq_10109210DebugUtils10; }  //FORWARD
namespace MFM { template <class EC, u32 POS> struct Uq_10109211EventWindow10; }  //FORWARD
namespace MFM { template <class EC, u32 POS> struct Uq_1010919AtomUtils10; }  //FORWARD
namespace MFM { template <class EC, u32 POS> struct Uq_10106Random10; }  //FORWARD
namespace MFM { template <class EC> struct Ue_102294Pbox10; }  //FORWARD
namespace MFM { template <class EC> struct Ue_10105Empty10; }  //FORWARD
namespace MFM { template <class EC> struct Ue_10104Wall10; }  //FORWARD
namespace MFM { template <class EC> struct Ue_10106Marker10; }  //FORWARD
namespace MFM { template <class EC, u32 POS> struct Uq_102323C2D10; }  //FORWARD
namespace MFM { template <class EC, u32 POS> struct Uq_10105MDist10; }  //FORWARD
namespace MFM { template <class EC, u32 POS> struct Uq_10104Fail10; }  //FORWARD

namespace MFM{

  template<class EC>
  class Ue_102689214WindowServices10 : public UlamElement<EC>  {
    // Extract short names for parameter types
    typedef typename EC::ATOM_CONFIG AC;
    typedef typename AC::ATOM_TYPE T;
    enum { BPA = AC::BITS_PER_ATOM };
    typedef BitVector<BPA> BV;


  public:

    static Ue_102689214WindowServices10 THE_INSTANCE;

    //! WindowServices.ulam:21:   typedef Unsigned(3) Radius;

    //! WindowServices.ulam:23:   typedef Unsigned(6) Index;

    //! WindowServices.ulam:24:   typedef Index IndexArray[4];

    //! WindowServices.ulam:26:   typedef Unsigned(8) Count;

    //! WindowServices.ulam:27:   typedef Count CountArray[4];

    //! WindowServices.ulam:29:   typedef Unsigned(2) Slot;

    //! WindowServices.ulam:32:   MDist mdist;
    typedef Uq_10105MDist10<EC, 25> Ut_Um_5mdist;

    //! WindowServices.ulam:33:   Random random;
    typedef Uq_10106Random10<EC, 25> Ut_Um_6random;

    //! WindowServices.ulam:34:   DebugUtils debug;
    typedef Uq_10109210DebugUtils10<EC, 25> Ut_Um_5debug;

    //! WindowServices.ulam:35:   EventWindow ew;
    typedef Uq_10109211EventWindow10<EC, 25> Ut_Um_2ew;

    //! WindowServices.ulam:36:   Fail fail;
    typedef Uq_10104Fail10<EC, 25> Ut_Um_4fail;

    //! WindowServices.ulam:39:   constant Int cNO_SITES_HIT =        -1;

    //! WindowServices.ulam:40:   constant Int cEMPTY_SITES_HIT =     -2;

    //! WindowServices.ulam:41:   constant Int cNONEMPTY_SITES_HIT =  -3;

    //! WindowServices.ulam:42:   constant Int cALL_SITES_HIT =       -4;

    //! WindowServices.ulam:44:   constant Int cMIN_SCAN_CODE =       cALL_SITES_HIT;

    //! WindowServices.ulam:48:   Radius firstRadius;
    typedef AtomicParameterType<EC, VD::U32, 3, 25> Up_Um_9211firstRadius;

    //! WindowServices.ulam:49:   Radius lastRadius;
    typedef AtomicParameterType<EC, VD::U32, 3, 28> Up_Um_9210lastRadius;

    //! WindowServices.ulam:50:   Index currentIndex;
    typedef AtomicParameterType<EC, VD::U32, 6, 31> Up_Um_9212currentIndex;

    //! WindowServices.ulam:51:   CountArray hitCount;
    typedef AtomicParameterType<EC, VD::U32, 32, 37> Up_Um_8hitCount;

    //! WindowServices.ulam:52:   IndexArray chosenIndex;
    typedef AtomicParameterType<EC, VD::U32, 24, 69> Up_Um_9211chosenIndex;

    Ue_102689214WindowServices10();
    ~Ue_102689214WindowServices10();


    //! WindowServices.ulam:69:   Void reset() {
    void Uf_5reset(UlamContext<EC>& uc, T& Uv_4self) const;


    //! WindowServices.ulam:59:   Void reset(Int first, Int last) {
    void Uf_5reset(UlamContext<EC>& uc, T& Uv_4self, Ui_Ut_102321i Uv_5first, Ui_Ut_102321i Uv_4last) const;


    //! WindowServices.ulam:63:   Void reset(Radius first, Radius last) {
    void Uf_5reset(UlamContext<EC>& uc, T& Uv_4self, Ui_Ut_10131u Uv_5first, Ui_Ut_10131u Uv_4last) const;


    //! WindowServices.ulam:77:   Bool scan(Int t0) { return scan(t0, cNO_SITES_HIT, cNO_SITES_HIT, cNO_SITES_HIT); }
    Ui_Ut_10111b Uf_4scan(UlamContext<EC>& uc, T& Uv_4self, Ui_Ut_102321i Uv_2t0) const;


    //! WindowServices.ulam:78:   Bool scan(Int t0, Int t1) { return scan(t0, t1, cNO_SITES_HIT, cNO_SITES_HIT); }
    Ui_Ut_10111b Uf_4scan(UlamContext<EC>& uc, T& Uv_4self, Ui_Ut_102321i Uv_2t0, Ui_Ut_102321i Uv_2t1) const;


    //! WindowServices.ulam:79:   Bool scan(Int t0, Int t1, Int t2) { return scan(t0, t1, t2, cNO_SITES_HIT); }
    Ui_Ut_10111b Uf_4scan(UlamContext<EC>& uc, T& Uv_4self, Ui_Ut_102321i Uv_2t0, Ui_Ut_102321i Uv_2t1, Ui_Ut_102321i Uv_2t2) const;


    //! WindowServices.ulam:98:   Bool scan(Int t0, Int t1, Int t2, Int t3) {
    Ui_Ut_10111b Uf_4scan(UlamContext<EC>& uc, T& Uv_4self, Ui_Ut_102321i Uv_2t0, Ui_Ut_102321i Uv_2t1, Ui_Ut_102321i Uv_2t2, Ui_Ut_102321i Uv_2t3) const;


    //! WindowServices.ulam:155:   Index getPick() {
    Ui_Ut_10161u Uf_7getPick(UlamContext<EC>& uc, T& Uv_4self) const;


    //! WindowServices.ulam:164:   Index getPick(Int slot) { return getPick((Slot) slot); }
    Ui_Ut_10161u Uf_7getPick(UlamContext<EC>& uc, T& Uv_4self, Ui_Ut_102321i Uv_4slot) const;


    //! WindowServices.ulam:159:   Index getPick(Slot slot) {
    Ui_Ut_10161u Uf_7getPick(UlamContext<EC>& uc, T& Uv_4self, Ui_Ut_10121u Uv_4slot) const;


    //! WindowServices.ulam:55:   Void init() {
    void Uf_4init(UlamContext<EC>& uc, T& Uv_4self) const;


    //! WindowServices.ulam:121:   Int next() {
    Ui_Ut_102321i Uf_4next(UlamContext<EC>& uc, T& Uv_4self) const;


    //! WindowServices.ulam:134:   Bool hit() { return hit((Slot) 0, (Unsigned) 1); }
    Ui_Ut_10111b Uf_3hit(UlamContext<EC>& uc, T& Uv_4self) const;


    //! WindowServices.ulam:137:   Bool hit(Int slot) { return hit((Slot) slot, (Unsigned) 1); }
    Ui_Ut_10111b Uf_3hit(UlamContext<EC>& uc, T& Uv_4self, Ui_Ut_102321i Uv_4slot) const;


    //! WindowServices.ulam:136:   Bool hit(Slot slot) { return hit(slot, (Unsigned) 1); }
    Ui_Ut_10111b Uf_3hit(UlamContext<EC>& uc, T& Uv_4self, Ui_Ut_10121u Uv_4slot) const;


    //! WindowServices.ulam:139:   Bool hit(Slot slot, Unsigned weight) {
    Ui_Ut_10111b Uf_3hit(UlamContext<EC>& uc, T& Uv_4self, Ui_Ut_10121u Uv_4slot, Ui_Ut_102321u Uv_6weight) const;


    //! WindowServices.ulam:148:   Count getHits() {
    Ui_Ut_10181u Uf_7getHits(UlamContext<EC>& uc, T& Uv_4self) const;


    //! WindowServices.ulam:153:   Count getHits(Int slot) { return getHits((Slot) slot); }
    Ui_Ut_10181u Uf_7getHits(UlamContext<EC>& uc, T& Uv_4self, Ui_Ut_102321i Uv_4slot) const;


    //! WindowServices.ulam:152:   Count getHits(Slot slot) { return hitCount[slot]; }
    Ui_Ut_10181u Uf_7getHits(UlamContext<EC>& uc, T& Uv_4self, Ui_Ut_10121u Uv_4slot) const;


    //! WindowServices.ulam:166:   Int test() {
    Ui_Ut_102321i Uf_4test(UlamContext<EC>& uc, T& Uv_4self) const;

    //helper method not called directly
    s32 PositionOfDataMemberType(const char * namearg) const;

    const UlamClassDataMemberInfo & GetDataMemberInfo(u32 dataMemberNumber) const;

    s32 GetDataMemberCount() const;

    const char * GetMangledClassName() const;

    //helper method not called directly
    bool internalCMethodImplementingIs(const T& targ) const;

  };

  template<class EC>
  Ue_102689214WindowServices10<EC> Ue_102689214WindowServices10<EC>::THE_INSTANCE;

} //MFM

#include "Ue_102689214WindowServices10.tcc"

#endif //UE_102689214WINDOWSERVICES10_H
